import React, { useEffect, useState } from "react";

// 1.useEffect(callback)
// be called component re-ren
// be called component add elemont in DOM
// 2.useEffect(callback,[])
// only be called component mouth and do not to be when re-render
//  3.useEffect(callback,[deps])   callback will call again when deps have changed
// all ussualy be called component mouth

const tabs = ["posts", "comments", "albums"];

function Content() {
  const [one, setOne] = useState("");
  const [posts, setPosts] = useState([]);
  const [type, setType] = useState("posts");
  const [scroll, setScroll] = useState(false);

  // resize

  //
  useEffect(() => {
    fetch(`https://jsonplaceholder.typicode.com/${type}`)
      .then((res) => res.json())
      .then((data) => {
        setPosts(data);
      });
  }, [type]);

  useEffect(() => {
    const handleScroll = () => {
      setScroll(window.scrollY >= 200);
    };

    window.addEventListener("scroll", handleScroll);
    console.log("addeventlistener");
    //clean up func
    return () => {
      window.removeEventListener("scroll", handleScroll);
      console.log("remove evlis");
    };
  }, []);

  return (
    <div>
      {tabs.map((tab) => (
        <button
          key={tab}
          style={
            type === tab
              ? {
                  backgroundColor: "black",
                  color: "white",
                }
              : {}
          }
          onClick={() => setType(tab)}
        >
          {tab}
        </button>
      ))}
      <input value={one} onChange={(e) => setOne(e.target.value)} />
      <ul>
        {posts.map((post) => (
          <li key={post.id}>{post.title || post.name}</li>
        ))}
      </ul>
      {scroll && (
        <button style={{ position: "fixed", right: "20px", bottom: "20px" }}>
          go to show
        </button>
      )}
    </div>
  );
}

export default Content;



//// edit comment


import React, { useEffect, useState } from "react";

// 1.useEffect(callback)
// be called component re-ren
// be called component add elemont in DOM
// 2.useEffect(callback,[])
// only be called component mouth and do not to be when re-render
//  3.useEffect(callback,[deps])   callback will call again when deps have changed
// all ussualy be called component mouth

const lessons = [
  {
    name: "Lear React JS Hooks",
    id: 1,
  },
  {
    name: "Watch Pokemon long Movie",
    id: 2,
  },
  {
    name: "Eating with many friends",
    id: 3,
  },
];

function Content() {
  const [lessonId, setlessonId] = useState([]);
  useEffect(() => {
    const handleChange = ({ detail }) => {
      console.log(detail);
    };
    window.addEventListener(`lesson-${lessonId}`, handleChange);
    return () => {
      window.addEventListener(`lesson-${lessonId}`, handleChange);
    };
  }, [lessonId]);
  return (
    <div>
      <ul>
        {lessons.map((lesson) => (
          <li
            key={lesson.id}
            onClick={() => setlessonId(lesson.id)}
            style={{ color: lessonId === lesson.id ? "blue" : "black" }}
          >
            {lesson.name}
          </li>
        ))}
      </ul>
    </div>
  );
}

export default Content;

