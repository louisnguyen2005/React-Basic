// clock
import React, { useRef, useEffect, useLayoutEffect, useState } from "react";

// 1.useEffect(callback)
// be called component re-ren
// be called component add elemont in DOM
// 2.useEffect(callback,[])
// only be called component mouth and do not to be when re-render
//  3.useEffect(callback,[deps])   callback will call again when deps have changed
// all ussualy be called component mouth

function Content() {
  const [time, setTime] = useState(50);
  const timeId = useRef();
  const prev = useRef();

  useEffect(() => {
    prev.current = time;
  }, [time]);

  const handleStart = () => {
    timeId.current = setInterval(() => {
      setTime((prev) => prev - 1);
    }, 1000);
  };
  const handleStop = () => {
    clearInterval(timeId.current);
  };
  return (
    <div>
      <h1>{time}</h1>
      <button onClick={handleStart}>Start</button>
      <button onClick={handleStop}>Stop</button>
    </div>
  );
}

export default Content;


// useCallback only use when we have memo 
import { useCallback, useState } from "react";
import Content from "./Content";

function App() {
  const [increase, setIncrese] = useState(0);
  const handleIncrese = useCallback(() => {
    setIncrese((prev) => prev + 1);
  }, []);
  return (
    <div className="App" style={{ padding: "32px" }}>
      <Content kason={handleIncrese} />
      <h1>{increase}</h1>
    </div>
  );
}

export default App;

import { memo } from "react";

function Content({ kason }) {
  console.log("re-render");
  return (
    <div>
      hello cac mino {kason}
      <button onClick={kason}>Click me</button>
    </div>
  );
}

export default memo(Content);

//// useMemo

// import { useCallback, useState, useMemo, useRef } from "react";

// function App() {
//   const [name, setName] = useState("");
//   const [price, setPrice] = useState("");
//   const [products, setProducts] = useState([]);
//   const nameref = useRef();
//   const handleSubmit = () => {
//     setProducts([...products, { name, price: +price }]);

//     setPrice("");
//     setName("");
//     nameref.current.focus();
//   };

//   const total = useMemo(() => {
//     return products.reduce((result, prod) => {
//       return result + prod.price;
//     }, 0);
//   }, [products]);

//   return (
//     <div className="App" style={{ padding: "32px" }}>
//       <input
//         ref={nameref}
//         type="text"
//         value={name}
//         placeholder="Enter name"
//         onChange={(e) => setName(e.target.value)}
//       />
//       <br />
//       <input
//         type="text"
//         value={price}
//         placeholder="Enter price"
//         onChange={(e) => setPrice(e.target.value)}
//       />
//       <br />
//       <button onClick={handleSubmit}>Add</button>
//       <br />
//       Total: {total}
//       <ul>
//         {products.map((product, index) => (
//           <li key={index}>
//             {product.name} - {product.price}
//           </li>
//         ))}
//       </ul>
//     </div>
//   );
// }

// export default App;






//// useReducer

import { useReducer } from "react";

const init = 0;
const UP_State = "up";
const DOWN_State = "down";
const reduce = (state, action) => {
  switch (action) {
    case UP_State:
      return state + 1;
    case DOWN_State:
      return state - 1;
    default:
      throw new Error("Wrong");
  }
};
function App() {
  const [count, dispatch] = useReducer(reduce, init);

  return (
    <div>
      <h1>{count}</h1>
      <button onClick={() => dispatch(DOWN_State)}>Down</button>

      <button onClick={() => dispatch(UP_State)}>Up</button>
    </div>
  );
}
export default App;

